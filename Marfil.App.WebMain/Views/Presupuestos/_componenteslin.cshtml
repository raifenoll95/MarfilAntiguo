@using System.Drawing
@using System.Web.UI.WebControls
@using Marfil.Dom.Persistencia.Model.Documentos.Presupuestos;
@using Resources;

@model IEnumerable<PresupuestosComponentesLinModel>

@{
    bool needCreatCopy = ViewData["key"] != null;
    var isreadonly = Session["readonly"] != null ? (bool)Session["readonly"] : false;
}

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        //general
        settings.Name = "GridViewComponente";
        settings.KeyFieldName = "Id";
        settings.CallbackRouteValues = new { Controller = "Presupuestos", Action = "PresupuestosComponentesLin" };
        settings.EnableRowsCache = true;
        settings.KeyboardSupport = true;
        settings.Width = Unit.Percentage(100);
        settings.SettingsPager.Visible = true;

        //edition
        //settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Presupuestos", Action = "PresupuestosComponentesLinAddNew" };
        //settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Presupuestos", Action = "PresupuestosComponentesLinUpdate" };
        //settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Presupuestos", Action = "PresupuestosComponentesLinDelete" };
        //settings.CustomActionRouteValues = new { Controller = "Articulos", Action = "CustomGridViewEditingPartial" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.Styles.Footer.HorizontalAlign = HorizontalAlign.Right;
        settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;

        settings.Columns.Add(j =>
        {
            j.FieldName = "IdComponente";
            j.ColumnType = MVCxGridViewColumnType.ButtonEdit;
            j.Width = Unit.Pixel(150);
            var p = j.PropertiesEdit as ButtonEditProperties;

            p.Style.Paddings.PaddingRight = Unit.Pixel(20);
            p.EncodeHtml = false;
            p.ClientSideEvents.Init = "DescripcionDisabledComponentes";
            p.ClientSideEvents.ValueChanged = "OnIdComponenteChanged";
            p.ClientSideEvents.KeyDown = "OnKeyPressCuentas";
            p.ClientInstanceName = j.FieldName;
            p.ButtonStyle.CssClass = "btn btn-minier btn-purple";
            p.ClientSideEvents.ButtonClick = "function(e,o) { SearchComponente(); } ";
            p.Buttons.Add(new EditButton("<i class=\"fa fa-search\"></i>"));
        });

        settings.Columns.Add(j =>
        {
            j.FieldName = "Descripcioncomponente";
            j.ColumnType = MVCxGridViewColumnType.ButtonEdit;
            j.Width = Unit.Pixel(360);
        });
        
        settings.Columns.Add("Idlineaarticulo");
        settings.Columns.Add("Piezas");
        settings.Columns.Add("Largo");
        settings.Columns.Add("Ancho");
        settings.Columns.Add("Grueso");
        settings.Columns.Add("PrecioInicial");
        settings.Columns.Add("Merma");
        settings.Columns.Add("Precio"); 
        settings.Columns.Add("Integridadreferenciaflag");


        settings.Columns["IdComponente"].Visible = true;
        settings.Columns["Descripcioncomponente"].Visible = true;
        settings.Columns["Idlineaarticulo"].Visible = true;
        settings.Columns["Piezas"].Visible = true;
        settings.Columns["Largo"].Visible = true;
        settings.Columns["Ancho"].Visible = true;
        settings.Columns["Grueso"].Visible = true;
        settings.Columns["PrecioInicial"].Visible = true;
        settings.Columns["Merma"].Visible = true;
        settings.Columns["Precio"].Visible = true;
        settings.Columns["Integridadreferenciaflag"].Visible = false;

        //settings.CommandColumn.Visible = !isreadonly;
        if (!isreadonly)
        {
            settings.CommandColumn.ButtonType = GridCommandButtonRenderMode.Button;
            settings.CommandColumn.ShowNewButton = false;
            //settings.CommandColumn.ShowDeleteButton = true;
            //settings.CommandColumn.ShowEditButton = true;

            //settings.SettingsCommandButton.EditButton.Text = "<span tabindex=\"-1\" class=\"fa fa-pencil\" title=\"" + General.LblEditar + " - (F2)\"></i>";
            //settings.SettingsCommandButton.DeleteButton.Text = "<span tabindex=\"-1\" class=\"fa fa-trash\" title=\"" + General.LblBorrar + " - (Supr)\"></i>";
            //settings.SettingsCommandButton.UpdateButton.Text = "<span tabindex=\"-1\" class=\"fa fa-save\" title=\"" + General.LblGuardar + " - (Enter)\"></i>";
            //settings.SettingsCommandButton.CancelButton.Text = "<span tabindex=\"-1\" class=\"fa fa-close\" title=\"" + General.LblCancelar + " - (Ctlr + '+')\"></i>";
            //settings.CommandColumn.CustomButtons.Add(new GridViewCommandColumnCustomButton() { ID = "btnCopy", Text = "<span tabindex=\"-1\" class=\"fa fa-copy\" title=\"" + General.LblClonar + " - (Ctlr + '+')\"></i>" });


            settings.CommandColumn.Width = Unit.Pixel(150);
            settings.Styles.CommandColumnItem.CssClass = "btn btn-info";
            settings.Styles.CommandColumnItem.BorderStyle = BorderStyle.None;
            //settings.CommandColumn.VisibleIndex = 0;
            settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
        }

        settings.SettingsEditing.ShowModelErrorsForEditors = true;
        settings.InitNewRow += (s, e) =>
        {
            //Si es un registro nuevo
            e.NewValues["IdComponente"] = "";
            e.NewValues["Descripcioncomponente"] = "";
            e.NewValues["Idlineaarticulo"] = "";
            e.NewValues["Piezas"] = 0;
            e.NewValues["Largo"] = 0;
            e.NewValues["Ancho"] = 0;
            e.NewValues["Grueso"] = 0;
            e.NewValues["Merma"] = 0;
            e.NewValues["Precio"] = 0;

            if (needCreatCopy)
            {
                object keyValue = ViewData["key"];

                MVCxGridView gridView = (MVCxGridView) s;
                object[] rowValues = (object[]) gridView.GetRowValuesByKeyValue(keyValue, new string[] {"IdComponente", "Descripcioncomponente", "Idlineaarticulo", "Piezas", "Largo", "Ancho", "Grueso", "Merma", "Precio"});

                e.NewValues["IdComponente"] = rowValues[0];
                e.NewValues["Descripcioncomponente"] = rowValues[1];
                e.NewValues["Idlineaarticulo"] = rowValues[2];
                e.NewValues["Piezas"] = rowValues[3];
                e.NewValues["Largo"] = rowValues[4];
                e.NewValues["Ancho"] = rowValues[5];
                e.NewValues["Grueso"] = rowValues[6];
                e.NewValues["Merma"] = rowValues[7];
                e.NewValues["Precio"] = rowValues[8];
            }
        };

        settings.BeforeGetCallbackResult = (sender, e) =>
        {
            if (needCreatCopy)
            {
                MVCxGridView gridView = (MVCxGridView) sender;
                gridView.AddNewRow();
            }
        };

        if (!isreadonly)
        {
            settings.ClientSideEvents.CustomButtonClick = "function(s,e) { OnCustomButtonClick(s,e);}";
            settings.ClientSideEvents.EndCallback = "function(s,e) { OnEndEditing(s,e);}";
            settings.ClientSideEvents.BeginCallback = "function(s,e) { OnStartEditing(s,e);}";
            settings.ClientSideEvents.RowDblClick = "function(s,e) {s.StartEditRow(e.visibleIndex)} ";
            settings.ClientSideEvents.FocusedRowChanged = "function(s,e) { FunOnFocusedRowLineasChanged(s, e);} ";
            settings.ClientSideEvents.Init = "function(s,e) { GridViewLineas.Focus();  }";

        }


        if (isreadonly)
        {
            // settings.CommandColumn.VisibleIndex = -1;
            settings.ClientSideEvents.RowDblClick = null;
        }
        //display
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;

        settings.ControlStyle.Border.BorderColor = ColorTranslator.FromHtml("#DDDDDD");
        settings.Styles.Footer.BackColor = ColorTranslator.FromHtml("#F2F2F2");


        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Left;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
    });





    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);

    }
}

@grid.Bind(Model).GetHtml()

<script type="text/javascript">

        function FunOnFocusedRowChanged(s, e) {
            $("#GridViewComponente").unbind("keydown");
            $('#GridViewComponente').keydown(function (event) {

                var keycode = (event.keyCode ? event.keyCode : event.which);
                var index = s.GetFocusedRowIndex();

                switch (keycode) {
                    case 113://editar
                        if (!GridViewComponente.IsEditing()) {

                            GridViewComponente.StartEditRow(index);
                        }
                        break;
                    case 46://Eliminar
                        if (!GridViewComponente.IsEditing()) {
                            GridViewComponente.DeleteRow(index);
                        }
                        break;
                    case 27://escape
                        if (GridViewComponente.IsEditing()) {
                            GridViewComponente.CancelEdit();
                            GridViewComponente.Focus();
                        }
                        break;
                    case 13://enter
                        if (GridViewComponente.IsEditing()) {
                            GridViewComponente.Focus();
                            GridViewComponente.UpdateEdit();
                        }
                        break;
                    case 107://mas
                        if (!GridViewComponente.IsEditing()) {
                            if (event.ctrlKey) {
                                event.preventDefault();
                                rowKeyValueToCopy = s.GetRowKey(GridViewComponente.GetFocusedRowIndex());
                                s.PerformCallback();

                            } else {
                                CreateRow();
                            }
                        }
                        break;
                }

            });
        }

        //Se le llama cuando le das a nuevo registro
        function CreateLineasRowComponentes() {

            if (!GridViewComponente.IsEditing()) {
                GridViewComponente.Focus();
                var rowIndex = GridViewComponente.GetFocusedRowIndex();
                GridViewComponente.AddNewRow();
            }
        }

        //SE VIENE AQUI CUANDO CAMBIAS EL ID DEL COMPONENTE
        function OnIdComponenteChanged(s, e) {

            var componente = s.GetValue();
            s.SetValue(componente);
            GridViewComponente.GetEditor("IdComponente").SetEnabled(false);

            //Buscamos la descripcion del articulo
            SearchDescripcionAndPermitirMedidas(componente);
            s.Focus();
        }

        //Seteamos descripcion y medidas
        function SearchDescripcionAndPermitirMedidas(obj) {

            console.log("@Url.Action("ArticulosDocumentosApi","Api")" + "/" + obj);
            $.get("@Url.Action("ArticulosDocumentosApi","Api")" + "/" + obj).success(function (result) {

                //Descripcion
                GridViewComponente.GetEditor("Descripcioncomponente").SetValue(result.Descripcion);

                GridViewComponente.GetEditor("Largo").SetValue(result.Largo);
                GridViewComponente.GetEditor("Ancho").SetValue(result.Ancho);
                GridViewComponente.GetEditor("Grueso").SetValue(result.Grueso);

                //Largo, Ancho, Grueso
                GridViewComponente.GetEditor("Piezas").SetEnabled(true);
                GridViewComponente.GetEditor("Merma").SetEnabled(true);
                GridViewComponente.GetEditor("Largo").SetEnabled(result.Permitemodificarlargo);
                GridViewComponente.GetEditor("Ancho").SetEnabled(result.Permitemodificarancho);
                GridViewComponente.GetEditor("Grueso").SetEnabled(result.Permitemodificargrueso);

            }).error(function (jqXHR, textStatus, errorThrown) {

                GridViewComponente.GetEditor("IdComponente").SetEnabled(true);
            });
        }

        //Se le llama cuando le das a la lupa para buscar el codigo del tercero
        function OnKeyPressCuentas(s, e) {
            console.log("keydown");
            var keycode = (e.htmlEvent.keyCode ? e.htmlEvent.keyCode : e.htmlEvent.which);
            if (keycode == 66 && e.htmlEvent.ctrlKey) {
                SearchTercero();
            }
        }

        //Se le llama cuando le das a la lupa de la columna
        function SearchComponente() {

            var obj = {
                campoIdentificador: "Id",
                IdComponenteasociado: "IdComponente",
                IdFormulariomodal: "BusquedaGlobal",
                Url: '@Url.Action("ArticulosApi","Api")',
                Titulo: "Busqueda de artículos",
                Params: "{\"nivel\":\"0\"}"
            };
            eventAggregator.Publish("_lanzarbusqueda", obj);
        }

        //Viene del BusquedasController.js que hace un publish con la cuenta y aqui te suscribes al evento
        eventAggregator.RegisterEvent("IdComponente-Buscarfocus", function (obj) {
            GridViewComponente.GetEditor("IdComponente").SetValue(obj);
            GridViewComponente.GetEditor("IdComponente").SetEnabled(false);
            SearchDescripcionAndPermitirMedidas(obj);
        });

        //Tenemos que tener a disabled la descripcion para que el usuario no la pueda modificar
        function DescripcionDisabledComponentes(s, e) {
            s.Focus();
            GridViewComponente.GetEditor("Descripcioncomponente").SetEnabled(false);
        }

        //Creamos fila
        function CreateRow() {
            if (!GridViewComponente.IsEditing()) {
                GridViewComponente.Focus();
                GridViewComponente.AddNewRow();
            }
        }

        //Focus
        $(document).ready(function () {
            GridViewComponente.Focus();
        });

</script>
