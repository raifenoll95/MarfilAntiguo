@using System.Web.Mvc.Html
@using Marfil.Dom.Persistencia.Model.Configuracion.Cuentas
@using Marfil.Dom.Persistencia.Model.Terceros
@using Marfil.Inf.ResourcesGlobalization.Textos.Entidades
@using Resources
@using Marfil.Dom.Persistencia.Model;
@using RBundle = Marfil.Inf.ResourcesGlobalization.Textos.Entidades.Bundle;
@model Marfil.Dom.Persistencia.Model.Graficaslistados.ConfiguraciongraficasModel
@{
    var isreadonly = ViewData["readonly"] != null ? (bool)ViewData["readonly"] : false;
    var iseditable = ViewData["operacion"] != null && (ViewData["operacion"] == "Edit");

    var isNuevo = !isreadonly && !iseditable;
}
@Html.HiddenFor(f=>Model.Codigo)
<div class="form-group">
    @Html.LabelFor(f => Model.Titulo, new {@class = "control-label col-md-2"})
    <div class="col-md-10">
        @Html.TextBoxFor(f => Model.Titulo, isreadonly ? (object) new {@class = "form-control", @autofocus = "", @readonly = "readonly"} : (object) new {@class = "form-control", @autofocus = ""})
    </div>
    <div class="col-md-offset-2 col-md-10">
        @Html.ValidationMessageFor(f => Model.Titulo, "", new {@class = "text-danger"})
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(f => Model.Agruparpor, new {@class = "control-label col-md-2"})
    <div class="col-md-10">
        @Html.DropDownListFor(f=>Model.Agruparpor,Model.ColumnasAgruparPor.Select(f=>new SelectListItem() {Value = f,Text=f}), isreadonly ? (object)new { @class = "form-control", @readonly = "readonly" } : (object)new { @class = "form-control" })
     
    </div>
    <div class="col-md-offset-2 col-md-10">
        @Html.ValidationMessageFor(f => Model.Agruparpor, "", new {@class = "text-danger"})
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(f => Model.Valores, new {@class = "control-label col-md-2"})
    <div class="col-md-10">
        @Html.DropDownListFor(f => Model.Valores, Model.ColumnasValores.Select(f => new SelectListItem() { Value = f, Text = f }), isreadonly ? (object)new { @class = "form-control", @readonly = "readonly" } : (object)new { @class = "form-control" })
    </div>
    <div class="col-md-offset-2 col-md-10">
        @Html.ValidationMessageFor(f => Model.Valores, "", new {@class = "text-danger"})
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(f => Model.Tipografica, new {@class = "control-label col-md-2"})
    <div class="col-md-10">
        @Html.EnumDropDownListFor(f => Model.Tipografica, isreadonly ? (object) new {@class = "form-control", @readonly = "readonly"} : (object) new {@class = "form-control"})
    </div>
    <div class="col-md-offset-2 col-md-10">
        @Html.ValidationMessageFor(f => Model.Tipografica, "", new {@class = "text-danger"})
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(f => Model.Apareceinicioview, new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.CheckBoxFor(f => Model.Apareceinicioview, isreadonly ? (object)new {   @disabled = "disabled" } : (object)new {  })
    </div>
    <div class="col-md-offset-2 col-md-10">
        @Html.ValidationMessageFor(f => Model.Apareceinicioview, "", new { @class = "text-danger" })
    </div>
</div>