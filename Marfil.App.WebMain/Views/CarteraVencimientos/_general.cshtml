@using Marfil.App.WebMain.Misc
@using Marfil.Dom.Persistencia.Model.Documentos.CobrosYPagos
@using Marfil.App.WebMain.Misc
@using Marfil.Dom.Persistencia.Model.Configuracion.Cuentas
@using Marfil.Dom.Persistencia.ServicesView.Servicios.Campoverificacion
@using Marfil.Inf.ResourcesGlobalization.Textos.Entidades
@using Marfil.Dom.Persistencia.Model.FicherosGenerales;
@using Resources

@*Rai*@

@model CarteraVencimientosModel
@{
    var isreadonly = ViewData["readonly"] != null ? (bool)ViewData["readonly"] : false;
    var iseditable = ViewData["operacion"] != null && (ViewData["operacion"] == "Edit");
    var isNuevo = !isreadonly && !iseditable;
    var campoverificacion = FCampoverificacion.Instance.GetModel<CuentasModel>(WebHelper.ContextService);
    var cvsituaciones = FCampoverificacion.Instance.GetModel<SituacionesTesoreriaModel>(WebHelper.ContextService);
}

<script src="@Url.Content("~/Scripts/jquery.redirect.js")"></script>
<script src="@Url.Content("~/Scripts/Model/Articulos/Formulas/Formulas.js")"></script>
<script src="@Url.Content("~/Scripts/Model/Articulos/Formulas/FormulasService.js")"></script>
<script src="@Url.Content("~/Scripts/Model/Facturas/VencimientosController.js")"></script>

    @*Tipo Circuito*@
    <div class="form-group">
        @Html.LabelFor(f => Model.Tipo, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.EnumDropDownList("Tipo", Model.Tipo, isreadonly ? (object)new { @disabled = "disabled", @class = "form-control" } : (object)new { @class = "form-control" })
            @Html.ValidationMessageFor(f => Model.Tipo, "", new { @class = "text-danger" })
        </div>
    </div>

    @*Situacion*@
    <div class="form-group">
        @Html.LabelFor(f => Model.Situacion, isreadonly || iseditable ? (object)new { @class = "control-label col-md-2", @readonly = "readonly" } : new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                cvsituaciones.Name = "Situacion";
                cvsituaciones.Url = Url.Action("SituacionesApi", "Api");
                cvsituaciones.Valor = Model.Situacion;
                cvsituaciones.Titulo = "Situaciones de tesorería";
                //cvsituaciones.SoloLectura = true;
                cvsituaciones.Obligatorio = true;
            }
            @Html.Partial("CampoverificacionUI", cvsituaciones)

        </div>
        <div class="col-md-10 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.Fkformaspago, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(f => Model.Traza, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.TextBoxFor(f => Model.Traza, isreadonly || iseditable ? (object)new { @aria_label = "codigo", @class = "form-control", @readonly = "readonly" } : (object)new { @class = "form-control", @autofocus = "" })
        </div>
        <div class="col-md-1">
            @Html.ValidationMessageFor(f => Model.Traza, "", new { @class = "text-danger" })
        </div>

        @if (Model.urlDocumento != null && (isreadonly || iseditable))
        {
            <div class="col-md-2">
                <a class="btn-xs btn btn-info" align="right" href="@Model.urlDocumento" target="_blank">
                    <i class="fa fa-eye">
                        Ver documento
                    </i>
                </a>
            </div>
        }
    </div>

    @*Cuenta*@
    <div class="form-group">
        @Html.LabelFor(f => Model.Fkcuentas, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                campoverificacion.Name = "Fkcuentas";
                campoverificacion.Url = Url.Action("CuentasTiposTercerosSemiExclusiveApi", "Api");
                campoverificacion.Valor = Model.Fkcuentas;
                campoverificacion.Titulo = Clientes.TituloEntidadSingular;
                campoverificacion.SoloLectura = isreadonly || iseditable;
                campoverificacion.Params = "{\"tipocuenta\":" + (int)TiposCuentas.Clientes + "}";
                campoverificacion.Obligatorio = true;
            }
            @Html.Partial("CampoverificacionUI", campoverificacion)
        </div>
        <div class="col-md-10 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.Fkcuentas, "", new { @class = "text-danger" })
        </div>
    </div>

    @*Importe Giro, Asignado, Pagado*@
    <div class="form-group">
        @Html.LabelFor(f => Model.Importegiro, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.TextBoxFor(f => Model.Importegiro, isreadonly || iseditable ? (object)new { @aria_label = "codigo", @class = "form-control", @readonly = "readonly" } : (object)new { @class = "form-control", @autofocus = "" })
        </div>
        <div class="col-md-2 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.Importegiro, "", new { @class = "text-danger" })
        </div>
    </div>

    @*Estado, Fecha Vto*@
    <div class="form-group">
        @Html.LabelFor(f => Model.Fechavencimiento, new { @class = "control-label col-md-2", style = "font-weight: bold;" })
        <div class="col-md-4">
            @Html.EditorFor(f => Model.Fechavencimiento)
        </div>
    </div>

    @*Observaciones*@
    <div class="form-group">
        @Html.LabelFor(f => Model.Comentario, new { @class = "control-label col-md-2"})
        <div class="col-md-10">
            @Html.TextAreaFor(f => Model.Comentario, isreadonly ? (object)new { @class = "form-control", @autofocus = "", @readonly = "readonly" } :
                                                                  (object)new { @class = "form-control", @autofocus = ""})
            @Html.ValidationMessageFor(f => Model.Comentario, "", new { @class = "text-danger" })
        </div>
    </div>

    @{
        if (isNuevo || iseditable)
        {
            <script src="@Url.Content("~/components/bootbox.js/bootbox.min.js")"></script>
            <script src="@Url.Content("~/Scripts/Model/Misc/VerificaPk.js")"></script>
        }
    }
