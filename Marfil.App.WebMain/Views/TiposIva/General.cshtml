@using Marfil.Dom.Persistencia.Helpers
@model Marfil.Dom.Persistencia.Model.Iva.TiposIvaModel
@{
    var isreadonly = ViewData["readonly"] != null ? (bool)ViewData["readonly"] : false;
    var iseditable = ViewData["operacion"] != null && (ViewData["operacion"] == "Edit");
    var isNuevo = !isreadonly && !iseditable;
}
@Html.HiddenFor(f => Model.Empresa)
@if (iseditable)
{
    @Html.HiddenFor(f => Model.Id)
}

<div class="form-group" @Html.Raw(isNuevo ? "ng-controller=\"VerificaPk\"" : string.Empty)>
    @Html.LabelFor(f => Model.Id, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.Id, isreadonly || iseditable ? (object)new { @class = "form-control", @autofocus = "", @disabled = "disabled" } : (object)new { @class = "form-control", @autofocus = "", @ng_blur = "existePk(3,0,\"" + Url.Action("Exists", "TiposIva") + "\",\"" + Url.Action("Edit", "TiposIva") + "\")", @ng_model = "codigo", @id = "idcontrol" })
        @Html.ValidationMessageFor(f => Model.Id, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(f => Model.Nombre, new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.TextBoxFor(f => Model.Nombre, isreadonly ? (object)new { @class = "form-control", @autofocus = "", @disabled = "disabled" } : (object)new { @class = "form-control", @autofocus = "" })
        @Html.ValidationMessageFor(f => Model.Nombre, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(f => Model.PorcentajeIva, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.PorcentajeIva, isreadonly ? (object)new { @class = "form-control", @autofocus = "", @disabled = "disabled" } : (object)new { @class = "form-control", @autofocus = "" })
        @Html.ValidationMessageFor(f => Model.PorcentajeIva, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(f => Model.PorcentajeRecargoEquivalencia, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.PorcentajeRecargoEquivalencia, isreadonly ? (object)new { @class = "form-control", @autofocus = "", @disabled = "disabled" } : (object)new { @class = "form-control", @autofocus = "" })
        @Html.ValidationMessageFor(f => Model.PorcentajeRecargoEquivalencia, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(f => Model.PorcentajeDeducible, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.PorcentajeDeducible, isreadonly ? (object)new { @class = "form-control", @autofocus = "", @disabled = "disabled" } : (object)new { @class = "form-control", @autofocus = "" })
        @Html.ValidationMessageFor(f => Model.PorcentajeDeducible, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">

    @Html.LabelFor(f => Model.IvaDeducible, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.CheckBoxFor(f => Model.IvaDeducible, isreadonly ? (object)new { @autofocus = "", @disabled = "disabled" } : (object)new { @autofocus = "" })
        @Html.ValidationMessageFor(f => Model.IvaDeducible, "", new { @class = "text-danger" })
    </div>
</div>

@{
    if (isNuevo)
    {
        <script src="@Url.Content("~/components/bootbox.js/bootbox.min.js")"></script>
        <script src="@Url.Content("~/Scripts/Model/Misc/VerificaPk.js")"></script>
    }
}