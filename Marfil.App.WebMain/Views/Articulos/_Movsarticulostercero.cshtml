@using System.Drawing
@using System.Web.UI.WebControls
@using Marfil.Dom.Persistencia.Model.FicherosGenerales
@using Marfil.App.WebMain.Misc
@using Marfil.Dom.Persistencia.Model.Configuracion;
@using Marfil.Dom.Persistencia.Model
@using Marfil.Dom.Persistencia.Helpers;
@using Resources
@model IEnumerable<ArticulosTerceroModel>

@{
    bool needCreatCopy = ViewData["key"] != null;
    var isreadonly = Session["readonly"] != null ? (bool)Session["readonly"] : false;
}

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        //general
        settings.Name = "GridViewTercero";
        settings.KeyFieldName = "Id";
        settings.CallbackRouteValues = new { Controller = "Articulos", Action = "ArticulosTercero" };
        settings.EnableRowsCache = true;
        settings.KeyboardSupport = true;
        settings.Width = Unit.Percentage(100);
        settings.SettingsPager.Visible = true;

        //edition
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Articulos", Action = "ArticulosTerceroAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Articulos", Action = "ArticulosTerceroUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Articulos", Action = "ArticulosTerceroDelete" };
        settings.CustomActionRouteValues = new { Controller = "Articulos", Action = "CustomGridViewEditingPartial" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.Styles.Footer.HorizontalAlign = HorizontalAlign.Right;
        settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;

        //settings.Columns.Add("CodArticulo");

        settings.Columns.Add(j =>
        {
            j.FieldName = "CodTercero";
            j.ColumnType = MVCxGridViewColumnType.ButtonEdit;
            j.Width = Unit.Pixel(150);
            var p = j.PropertiesEdit as ButtonEditProperties;

            p.Style.Paddings.PaddingRight = Unit.Pixel(20);
            p.EncodeHtml = false;
            p.ClientSideEvents.Init = "DescripcionDisabledTerceros";
            p.ClientSideEvents.ValueChanged = "CuentaTerceroChanged";
            p.ClientSideEvents.KeyDown = "OnKeyPressCuentasTercero";
            p.ClientInstanceName = j.FieldName;
            p.ButtonStyle.CssClass = "btn btn-minier btn-purple";
            p.ClientSideEvents.ButtonClick = "function(e,o) { SearchTercero(); } ";
            p.Buttons.Add(new EditButton("<i class=\"fa fa-search\"></i>"));

            j.ReadOnly = true;
        });

        settings.Columns.Add(j =>
        {
            j.FieldName = "DescripcionTercero";
            j.Width = Unit.Pixel(350);
            j.ReadOnly = true;
        });

        settings.Columns.Add(j =>
        {
            j.FieldName = "CodArticuloTercero";
            j.Width = Unit.Pixel(150);
            j.ReadOnly = true;
        });

        settings.Columns.Add(j =>
        {
            j.FieldName = "Descripcion";
            j.Width = Unit.Pixel(350);
            j.ReadOnly = true;
        });

        settings.Columns["CodTercero"].Visible = true;
        settings.Columns["DescripcionTercero"].Visible = true;
        settings.Columns["CodArticuloTercero"].Visible = true;
        settings.Columns["Descripcion"].Visible = true;

        settings.InitNewRow += (s, e) =>
        {
            ////Si es un registro nuevo
            e.NewValues["CodTercero"] = "";
            e.NewValues["DescripcionTercero"] = "";
            e.NewValues["CodArticuloTercero"] = "";
            e.NewValues["Descripcion"] = "";

        };

        settings.CellEditorInitialize = (s, e) =>
        {

            var editor = e.Editor as ASPxEdit;

            if (editor == null) return;
            editor.ValidationSettings.Display = Display.Dynamic;

            if (e.Column.FieldName == settings.KeyFieldName)
            {
                editor.ValidationSettings.RegularExpression.ValidationExpression = "[0-9]{1,2}";
                editor.Focus();
            }


        };
        settings.CommandColumn.ButtonType = GridCommandButtonRenderMode.Button;
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.Width = Unit.Pixel(100);
        settings.Styles.CommandColumnItem.CssClass = "btn btn-info";
        settings.Styles.CommandColumnItem.BorderStyle = BorderStyle.None;
        settings.CommandColumn.VisibleIndex = 4;
        settings.SettingsEditing.ShowModelErrorsForEditors = true;
        settings.CellEditorInitialize += (sender, args) =>
        {

            if (args.Column.FieldName == settings.KeyFieldName)
            {
                ASPxTextBox tb = (ASPxTextBox)args.Editor;
                //tb.SetClientSideEventHandler("TextChanged", "function(s,e){ s.SetText(s.GetText().toUpperCase());}");
                tb.Focus();
            }
        };


        settings.ClientSideEvents.RowDblClick = "function(s,e) {s.StartEditRow(e.visibleIndex)} ";
        settings.ClientSideEvents.FocusedRowChanged = "function(s,e) { FunOnFocusedRowChangedTercero(s, e);} ";
        settings.ClientSideEvents.Init = "function(s,e) { GridViewComponente.Focus();}";

        if (ViewBag.ReadOnly != null && ViewBag.ReadOnly)
        {
            settings.CommandColumn.Visible = false;
            settings.ClientSideEvents.RowDblClick = null;
        }
        //display
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;
        settings.ControlStyle.Border.BorderColor = ColorTranslator.FromHtml("#DDDDDD");
        settings.Styles.Footer.BackColor = ColorTranslator.FromHtml("#F2F2F2");
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Left;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;

    });


    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);

    }
}



@grid.Bind(Model).GetHtml()

<script type="text/javascript">

        function FunOnFocusedRowChangedTercero(s, e) {
            $("#GridViewTercero").unbind("keydown");
            $('#GridViewTercero').keydown(function (event) {


                var keycode = (event.keyCode ? event.keyCode : event.which);
                var index = s.GetFocusedRowIndex();

                switch (keycode) {
                    case 113://editar
                        if (!GridViewTercero.IsEditing()) {
                            GridViewTercero.StartEditRow(index);
                        }
                        break;
                    case 46://Eliminar
                        if (!GridViewTercero.IsEditing()) {
                            GridViewTercero.DeleteRow(index);
                        }
                        break;
                    case 27://escape
                        if (GridViewTercero.IsEditing()) {
                            GridViewTercero.CancelEdit();
                            GridViewTercero.Focus();
                        }
                        break;
                    case 13://enter
                        if (GridViewTercero.IsEditing()) {
                            GridViewTercero.Focus();
                            GridViewTercero.UpdateEdit();
                        }
                        break;
                    case 107://mas
                        CreateRow();
                        break;
                }

            });
        }

        //Se le llama cuando le das a nuevo registro
        function CreateLineasRowTercero() {

            if (!GridViewTercero.IsEditing()) {
                GridViewTercero.Focus();
                var rowIndex = GridViewTercero.GetFocusedRowIndex();
                GridViewTercero.AddNewRow();
            }
        }

        //Le pasamos al ControllerHelper.js el input que ha introducido el usuario en el campo
        function CuentaTerceroChanged(s, e) {
            console.log(s.GetValue());
            eventAggregator.Publish("InputCodCuenta", s.GetValue());
            s.Focus();
        }

        //Se le llama cuando le das a la lupa para buscar el codigo del tercero
        function OnKeyPressCuentasTercero(s, e) {
            //console.log("keydown");
            var keycode = (e.htmlEvent.keyCode ? e.htmlEvent.keyCode : e.htmlEvent.which);
            if (keycode == 66 && e.htmlEvent.ctrlKey) {
                SearchTercero();
            }
            if (keycode == 13) {
                console.log("ha presionado");
            }
        }

        //Se le llama cuando le das a la lupa de la columna
        function SearchTercero() {

            var obj = {
                campoIdentificador: "Id",
                IdComponenteasociado: "CodTercero",
                IdFormulariomodal: "BusquedaGlobal",
                Url: '@Url.Action("TercerosApi","Api")',
                Titulo: "Busqueda de terceros",
                Params: "{\"nivel\":\"0\"}"
            };
            eventAggregator.Publish("_lanzarbusqueda", obj);
        }

        //Tenemos que tener a disabled la descripcion para que el usuario no la pueda modificar
        function DescripcionDisabledTerceros(s, e) {
            s.Focus();
            GridViewTercero.GetEditor("DescripcionTercero").SetEnabled(false);
        }

        function CreateRow() {
            if (!GridViewTercero.IsEditing()) {
                GridViewTercero.Focus();
                GridViewTercero.AddNewRow();
            }
        }

        $(document).ready(function () {
            GridViewTercero.Focus();
        });

</script>
