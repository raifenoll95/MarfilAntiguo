@using System.Web.Mvc.Html
@using Marfil.Dom.Persistencia
@using Marfil.Dom.Persistencia.Helpers
@using Marfil.Dom.Persistencia.Listados
@using Marfil.Dom.Persistencia.Model.Configuracion.Cuentas
@using Marfil.Dom.Persistencia.Model.Documentos.Presupuestos
@using Marfil.Dom.Persistencia.Model.FicherosGenerales
@using Marfil.Dom.Persistencia.Model.Terceros
@using Marfil.Dom.Persistencia.ServicesView.Servicios.Campoverificacion
@using Marfil.App.WebMain.Misc
@using Marfil.Dom.Persistencia.Model.Configuracion
@using Marfil.Dom.Persistencia.Model.Interfaces
@using Resources

@model Marfil.Dom.Persistencia.Listados.ListadosMayor
@{
    var toolbarModel = Model as IToolbar;
    ViewBag.Title = toolbarModel?.Toolbar?.Titulo;
    var cvseriecontable = FCampoverificacion.Instance.GetModel<SeriesContablesModel>(WebHelper.ContextService);
    var cvcuentas = FCampoverificacion.Instance.GetModel<CuentasModel>(WebHelper.ContextService); //Obtenemos un objeto de cuentasModel con sus atributos
    var listcanalcontable = WebHelper.GetApplicationHelper().GetListCanalContable().Select(f => new SelectListItem()
    {
        Text = f.Descripcion,
        Value = f.Valor
    }).ToList();
    listcanalcontable.Insert(0, new SelectListItem() { Text = "", Value = "" });


}
@Html.HiddenFor(f => Model.Empresa)

<div class="col-md-10">

    @Html.HiddenFor(f => Model.InicioEjercicio)
    
    <div class="form-group">
        @Html.LabelFor(f => Model.Fkseriescontables, new {@class = "control-label col-md-2"})
        <div class="col-md-1">
            @{
                cvseriecontable.Name = "Fkseriescontables";
                cvseriecontable.Url = Url.Action("SeriesContablesApi", "Api");
                cvseriecontable.Valor = Model.Fkseriescontables;
                cvseriecontable.Titulo = "Series contables";
                cvseriecontable.Params = "{\"tipodocumento\":\"AST\"}";
                cvseriecontable.SoloLectura = false;
                cvseriecontable.Autofocus = true;
                cvseriecontable.Obligatorio = true;
                cvseriecontable.Configuracion.OcultarTexto = false;
            }
            @Html.Partial("CampoverificacionUI", cvseriecontable)
        </div>
        <div class="col-md-12"></div>
        <div class="col-md-2 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.Fkseriescontables, "", new {@class = "text-danger"})
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(f => Model.CuentaDesde, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{

                cvcuentas.Name = "CuentaDesde";
                cvcuentas.Url = Url.Action("CuentasApi", "Api");
                cvcuentas.Valor = Model.CuentaDesde;
                cvcuentas.Autofocus = true;

            }

            @Html.Partial("CampoverificacionUI", cvcuentas)
            @Html.ValidationMessageFor(f => Model.CuentaDesde, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(f => Model.CuentaHasta, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{

                cvcuentas.Name = "CuentaHasta";
                cvcuentas.Url = Url.Action("CuentasApi", "Api");
                cvcuentas.Valor = Model.CuentaHasta;
                cvcuentas.Autofocus = true;

            }

            @Html.Partial("CampoverificacionUI", cvcuentas)
            @Html.ValidationMessageFor(f => Model.CuentaHasta, "", new { @class = "text-danger" })
        </div>
    </div>
        
    <div class="form-group">
        @Html.LabelFor(f => Model.FechaDesde, new {@class = "control-label col-md-2"})
        <div class="col-md-4">
            @Html.EditorFor(f => Model.FechaDesde)
        </div>
        @Html.LabelFor(f => Model.FechaHasta, new {@class = "control-label col-md-2"})
        <div class="col-md-4">
            @Html.EditorFor(f => Model.FechaHasta)
        </div>
        <div class="col-md-12"></div>
        <div class="col-md-4 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.FechaDesde, "", new {@class = "text-danger"})
        </div>
        <div class="col-md-4 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.FechaHasta, "", new {@class = "text-danger"})
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(f => Model.SaldosAnteriores, new {@class = "control-label col-md-2"})
        <div class="col-md-2">
            @Html.CheckBoxFor(f => Model.SaldosAnteriores, false)
        </div>
    </div>    

    <div class="form-group">
        @Html.LabelFor(f => Model.MostrarCuentasSinSaldo, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.CheckBoxFor(f => Model.MostrarCuentasSinSaldo, true, new { @checked = true })
            @Html.ValidationMessageFor(f => Model.MostrarCuentasSinSaldo, "", new { @class = "text-danger" })
        </div>
    </div>   

    <div class="form-group">
        @Html.LabelFor(f => Model.FechaInforme, new { @class = "control-label col-md-2" })
        <div class="col-md-4">
             @Html.EditorFor(f => Model.FechaInforme)
        </div>
    </div>
      
</div>

<script type="text/javascript">


    document.addEventListener('DOMContentLoaded', function () {

        var parentButtonListar = document.getElementsByClassName('btn btn-info')[0].parentElement;

        //Lo primero que tienes que hacer es crear un
        var button = document.createElement('button')
        button.id = "imprimir"
        button.className = "btn btn-info"
        button.type = "button"
        button.style.margin = "5px"
        button.addEventListener("click", imprimir) //Cuando haces click se llama al metodo imprimir de abajo

        //Nos interesa que por defecto, esté a true
        document.getElementById('MostrarCuentasSinSaldo').checked = true;

        //Nos creamos un boton. Tiene su className y su titulo: Imprimir
        var i = document.createElement('i')
        i.className = "fa fa-print"
        i.innerText = " Imprimir"

        //En un elemento, en este caso button, siempre se hace un append de lo que te has creado, en este caso i
        button.appendChild(i)

        // [1] Botón Limpiar
        parentButtonListar.insertBefore(button, parentButtonListar.children[1])

    }, false);

    function imprimir() {

        var data = {
            Serie: document.getElementById('Fkseriescontables').value,
            CuentaDesde: document.getElementById('CuentaDesde').value,
            CuentaHasta: document.getElementById('CuentaHasta').value,
            FechaDesde: document.getElementById('FechaDesde').value,
            FechaHasta: document.getElementById('FechaHasta').value,
            SaldosAnteriores: document.getElementById('SaldosAnteriores').checked,
            MostrarCuentasSinSaldo: document.getElementById('MostrarCuentasSinSaldo').checked,
            FechaInforme: document.getElementById('FechaInforme').value
        };
        console.log(data);

        var dataSerialized = JSON.stringify(data)

        window.open('@Url.Action("Visualizar", "Designer")' + '?primaryKey=' + dataSerialized + '&tipo=Mayor&reportId=Defecto');

    };


</script>