@using Marfil.App.WebMain.Misc
@using Marfil.Dom.ControlsUI.CampoVerificacion
@using Marfil.Dom.Persistencia.Helpers
@using Marfil.Dom.Persistencia.Model.Configuracion
@using Marfil.Dom.Persistencia.Model.FicherosGenerales
@using Marfil.Dom.Persistencia.Model.Iva
@using Marfil.Dom.Persistencia.ServicesView.Servicios.Campoverificacion
@using Marfil.Inf.ResourcesGlobalization.Textos.Entidades
@using Resources
@model Marfil.Dom.Persistencia.Model.Configuracion.SeriesModel
@{
    var isreadonly = ViewData["readonly"] != null ? (bool)ViewData["readonly"] : false;
    var iseditable = ViewData["operacion"] != null && (ViewData["operacion"] == "Edit");
    var cvmonedas = FCampoverificacion.Instance.GetModel<MonedasModel>(WebHelper.ContextService);
    var cvregimeniva = FCampoverificacion.Instance.GetModel<RegimenIvaModel>(WebHelper.ContextService);
    var cvcontadores = FCampoverificacion.Instance.GetModel<ContadoresModel>(WebHelper.ContextService);
    var cvseries = FCampoverificacion.Instance.GetModel<SeriesModel>(WebHelper.ContextService);
    var cvejercicios = FCampoverificacion.Instance.GetModel<EjerciciosModel>(WebHelper.ContextService);
    var isNuevo = !isreadonly && !iseditable;
    var listdocumentos = WebHelper.GetApplicationHelper().GetListTiposDocumentos().Select(f=>new SelectListItem() {Value = f.Valor,Text=f.Descripcion});

}


    <script src="@Url.Content("~/Scripts/Model/Series/SeriesController.js")"></script>


@Html.HiddenFor(f=>Model.Empresa)
<input type="hidden" name="Bloqueo.Entidad" value="@Model.Bloqueo.Entidad"/>
<input type="hidden" name="Bloqueo.Campoclaveprimaria" value="@Model.Bloqueo.Campoclaveprimaria"/>
<input type="hidden" name="Bloqueo.Valorclaveprimaria" value="@Model.Bloqueo.Valorclaveprimaria"/>
<input type="hidden" name="Bloqueo.Bloqueada" value="@Model.Bloqueo.Bloqueada.ToString().ToLower()" />
@if (!isNuevo)
{
    @Html.HiddenFor(f => Model.Tipodocumento)
}
<div ng-controller="SeriesCtrl" ng-init="init('@Model.Id','@Model.Tipodocumento','@Url.Action("SeriesAsociadasApi","Api")','@Model.Fkseriesasociada','@Url.Action("TipodocumentoAsociadoApi","Api")')">
    <div class="form-group">
        @Html.LabelFor(f => Model.Tipodocumento, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.DropDownListFor(f => Model.Tipodocumento, listdocumentos, isreadonly || iseditable ? (object)new { @class = "form-control", @disabled = "disabled" ,@id="idcontrol", @aria_label = "Codigo"} : (object)new { @required = "required", @class = "form-control", @autofocus = "", @ng_model = "tipodocumento", @aria_label = "Codigo", @id = "idcontrol" })
        </div>
        <div class="col-md-10 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.Tipodocumento, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(f => Model.Tipodealmacenlote, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.EnumDropDownListFor(f => Model.Tipodealmacenlote, isreadonly ? (object)new { @class = "form-control", @autofocus = "", @disabled = "disabled" } : (object)new { @class = "form-control", @autofocus = "" })
            @Html.ValidationMessageFor(f => Model.Tipodealmacenlote, "", new { @class = "text-danger" })
        </div>


        <div class="col-md-2 col-md-offset-2">
            @Html.LabelFor(f => Model.Entradasvarias, new { @class = "control-label" })
            @Html.CheckBoxFor(f => Model.Entradasvarias, isreadonly ? (object)new { @disabled = "disabled" } : (object)new { })
            @Html.ValidationMessageFor(f => Model.Entradasvarias, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-2 col-md-offset-2">
            @Html.LabelFor(f => Model.Salidasvarias, new { @class = "control-label" })
            @Html.CheckBoxFor(f => Model.Salidasvarias, isreadonly ? (object)new { @disabled = "disabled" } : (object)new { })
            @Html.ValidationMessageFor(f => Model.Salidasvarias, "", new { @class = "text-danger" })
        </div>


    </div>






    <div class="form-group">
        @Html.LabelFor(f => Model.Id, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @if (isNuevo)
            {
                @Html.TextBoxFor(f => Model.Id, isreadonly || iseditable ? (object)new { @class = "form-control", @readonly = "readonly" } : (object)new { @required = "required", @class = "form -control", @autofocus = "", @ng_blur = "existePk(3,2,\"" + Url.Action("Exists", "Series") + "\",\"" + Url.Action("Edit", "Series") + "\")", @ng_model = "codigo" })
            }
            else
            {
                <input type="text" class="form-control" name="Id" aria-label="Codigo" readonly="readonly" value="@Model.Id" />
            }


        </div>
        <div class="col-md-10 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.Id, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(f => Model.Descripcion, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(f => Model.Descripcion, isreadonly ? (object)new { @class = "form-control", @readonly = "readonly" } : (object)new { @class = "form-control" })
            @Html.ValidationMessageFor(f => Model.Descripcion, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(f => Model.Fkmonedas, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{

                cvmonedas.Name = "Fkmonedas";
                cvmonedas.Url = Url.Action("MonedasApi", "Api");
                cvmonedas.Valor = Model.Fkmonedas.HasValue ? Model.Fkmonedas.ToString() : string.Empty;
                cvmonedas.SoloLectura = isreadonly;
            }

            @Html.Partial("CampoverificacionUI", cvmonedas)
            @Html.ValidationMessageFor(f => Model.Fkmonedas, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(f => Model.Fkregimeniva, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{

                cvregimeniva.Name = "Fkregimeniva";
                cvregimeniva.Url = Url.Action("RegimenIvaApi", "Api");
                cvregimeniva.Valor = Model.Fkregimeniva;
                cvregimeniva.SoloLectura = isreadonly;
            }

            @Html.Partial("CampoverificacionUI", cvregimeniva)

        </div>
        <div class="col-md-offset-2 col-md-10">
            @Html.ValidationMessageFor(f => Model.Fkregimeniva, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(f => Model.Fkcontadores, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{

                cvcontadores.Name = "Fkcontadores";
                cvcontadores.Url = Url.Action("ContadoresApi", "Api");
                cvcontadores.Valor = Model.Fkcontadores;
                cvcontadores.SoloLectura = isreadonly;
                cvcontadores.Obligatorio = true;
            }

            @Html.Partial("CampoverificacionUI", cvcontadores)

        </div>
        <div class="col-md-offset-2 col-md-10">
            @Html.ValidationMessageFor(f => Model.Fkcontadores, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(f => Model.Fkejercicios, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                cvejercicios.Name = "Fkejercicios";
                cvejercicios.Url = Url.Action("EjerciciosApi", "Api");
                cvejercicios.Valor = Model.Fkejercicios;
                cvejercicios.SoloLectura = isreadonly;
            }
            @Html.Partial("CampoverificacionUI", cvejercicios)
        </div>
        <div class="col-md-offset-2 col-md-10">
            @Html.ValidationMessageFor(f => Model.Fkejercicios, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(f => Model.Tipoimpresion, new { @class = "control-label col-md-2" })
        <div class="col-md-2">
            @Html.EnumDropDownList("Tipoimpresion", Model.Tipoimpresion, isreadonly ? (object)new { @class = "form-control", @disabled = "disabled" } : (object)new { @class = "form-control" })
        </div>
        <div class="col-md-10 col-md-offset-2">
            @Html.ValidationMessageFor(f => Model.Tipoimpresion, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">

        <div class="col-md-2 col-md-offset-2">
            @Html.LabelFor(f => Model.Riesgo, new { @class = "control-label" })
            @Html.CheckBoxFor(f => Model.Riesgo, isreadonly ? (object)new { @disabled = "disabled" } : (object)new { })
            @Html.ValidationMessageFor(f => Model.Riesgo, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-2">
            @Html.LabelFor(f => Model.Borrador, new { @class = "control-label" })
            @Html.CheckBoxFor(f => Model.Borrador, isreadonly ? (object)new { @disabled = "disabled" } : (object)new { })
            @Html.ValidationMessageFor(f => Model.Borrador, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-2">
            @Html.LabelFor(f => Model.Rectificativa, new { @class = "control-label" })
            @Html.CheckBoxFor(f => Model.Rectificativa, isreadonly ? (object)new { @disabled = "disabled" } : (object)new { })
            @Html.ValidationMessageFor(f => Model.Rectificativa, "", new { @class = "text-danger" })
        </div>

    </div>
    

        <div class="form-group">
            <div ng-show="items.length>1">
                <input type="hidden" name="Fkserieasociadatipodocumento" ng-model="fkserieasociadatipodocumento" value="@Model.Fkserieasociadatipodocumento" />
                @Html.LabelFor(f => Model.Fkseriesasociada, new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    <select aria-label="Serie asociada"  ng-model="selected" class="form-control" name="Fkseriesasociada" @Html.Raw(isreadonly ? " disabled=\"disabled\"" : string.Empty)>
                        <option ng-selected="{{selected == item.Id}}" ng-repeat="item  in items" value="{{ item.Id }}">{{item.Descripcion}}</option>
                    </select>
                </div>
                <div class="col-md-10">
                    @Html.ValidationMessageFor(f => Model.Rectificativa, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>



    @if (iseditable)
    {
        @Html.EditorFor(f => Model.Bloqueo)
    }

    @{
        if (isNuevo)
        {
            <script src="@Url.Content("~/components/bootbox.js/bootbox.min.js")"></script>
            <script src="@Url.Content("~/Scripts/Model/Misc/VerificaPk.js")"></script>
        }
    }

</div>