@using System.Drawing
@using System.Text
@using System.Web.UI.WebControls
@using DevExpress.Data
@using Marfil.App.WebMain.Misc
@using Marfil.Dom.Persistencia.Helpers
@using Marfil.Dom.Persistencia.Model
@using Marfil.Dom.Persistencia.Model.Configuracion
@using Marfil.Dom.Persistencia.Model.Documentos.Traspasosalmacen
@using Marfil.Dom.Persistencia.Model.Documentos.Pedidos
@using Marfil.Dom.Persistencia.Model.FicherosGenerales
@using Marfil.Dom.Persistencia.ServicesView.Servicios
@using Marfil.Dom.Persistencia.ServicesView.Servicios.Campoverificacion
@using Marfil.Inf.Genericos.Helper
@using Marfil.Inf.ResourcesGlobalization.Textos.Entidades
@using Marfil.Inf.ResourcesGlobalization.Textos.GeneralUI
@using Resources
@model IEnumerable<Marfil.Dom.Persistencia.Model.Documentos.Traspasosalmacen.TraspasosalmacenLinModel>
@{
    bool needCreatCopy = ViewData["key"] != null;
    var isreadonly = Session["readonly"] != null ? (bool)Session["readonly"] : false;
    var configuracionAplicacion = WebHelper.GetApplicationHelper().GetConfiguracion();
    var listcanales = new List<SelectListItem>();
    if (configuracionAplicacion.VentasUsarCanal)
    {
        listcanales = WebHelper.GetApplicationHelper().GetListCanales().Select(f => new SelectListItem() { Value = f.Valor, Text = f.Descripcion }).ToList();
        listcanales.Insert(0, new SelectListItem() { Value = "", Text = "" });
    }

    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
}

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        //general
        settings.Name = "GridViewLineas";
        settings.KeyFieldName = "Id";
        settings.CallbackRouteValues = new { Controller = "Traspasosalmacen", Action = "TraspasosalmacenLin" };
        settings.EnableRowsCache = true;
        settings.KeyboardSupport = true;
        settings.Width = Unit.Percentage(100);
        settings.Height = Unit.Pixel(500);
        settings.SettingsPager.Visible = true;


        //edition
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Traspasosalmacen", Action = "TraspasosalmacenLinAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Traspasosalmacen", Action = "TraspasosalmacenLinUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Traspasosalmacen", Action = "TraspasosalmacenLinDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.SettingsBehavior.ConfirmDelete = false;
        settings.Styles.Footer.HorizontalAlign = HorizontalAlign.Right;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;

        settings.Columns.Add("Id");
        settings.Columns.Add(j =>
        {
            j.FieldName = "Fkarticulos";
            j.ColumnType = MVCxGridViewColumnType.ButtonEdit;
            j.Width = Unit.Pixel(150);
            var p = j.PropertiesEdit as ButtonEditProperties;

            p.Style.Paddings.PaddingRight = Unit.Pixel(10);
            p.EncodeHtml = false;
            p.ClientSideEvents.Init = "function(s, e){ s.Focus(); }";
            p.ClientSideEvents.TextChanged = "OnFkarticulosChanged";
            p.ClientSideEvents.KeyDown = "OnKeyPressArticulos";
            p.ClientInstanceName = j.FieldName;
            p.ButtonStyle.CssClass = "btn btn-minier btn-purple";
            p.ClientSideEvents.ButtonClick = "function(e,o) { SearchArticulo(); } ";
            p.Buttons.Add(new EditButton("<i class=\"fa fa-search\"></i>"));
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Descripcion";
            c.ColumnType = MVCxGridViewColumnType.Memo;
            c.CellStyle.Wrap = DefaultBoolean.True;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName= "Lote";
            c.ReadOnly = true;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Revision";
            c.Visible = configuracionAplicacion.Gestionarrevisiones;

        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Tabla";
            c.ReadOnly = true;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Canal";
            c.Visible = configuracionAplicacion.VentasUsarCanal;
            if (configuracionAplicacion.VentasUsarCanal)
            {
                c.ColumnType = MVCxGridViewColumnType.ComboBox;
                var comboBoxProperties = c.PropertiesEdit as ComboBoxProperties;
                comboBoxProperties.DropDownStyle = DropDownStyle.DropDownList;
                comboBoxProperties.TextField = "Text";
                comboBoxProperties.ValueField = "Value";
                comboBoxProperties.ValueType = typeof(String);
                comboBoxProperties.DataSource = listcanales;
                comboBoxProperties.EnableSynchronization = DefaultBoolean.True;
            }
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Caja";
            c.Width = Unit.Pixel(100);
        });

        settings.Columns.Add("Bundle");
        settings.Columns.Add(c =>
        {
            c.FieldName = "Cantidad";
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            var p = c.PropertiesEdit as SpinEditProperties;
            p.ClientSideEvents.ValueChanged = "OnSuperficieChanged";
            c.ReadOnly = true;

        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Cantidadpedida";
            c.ReadOnly = true;
            c.Visible = false;
        });


        settings.Columns.Add(c =>
        {
            c.FieldName = "SLargo";
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            var p = c.PropertiesEdit as SpinEditProperties;
            p.ClientSideEvents.ValueChanged = "OnSuperficieChanged";
            p.SpinButtons.ShowIncrementButtons = false;
        }
        );
        settings.Columns.Add(c =>
        {
            c.FieldName = "SAncho";
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            var p = c.PropertiesEdit as SpinEditProperties;
            p.ClientSideEvents.ValueChanged = "OnSuperficieChanged";
            p.SpinButtons.ShowIncrementButtons = false;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "SGrueso";
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            var p = c.PropertiesEdit as SpinEditProperties;
            p.ClientSideEvents.ValueChanged = "OnSuperficieChanged";
            p.SpinButtons.ShowIncrementButtons = false;
        });
        settings.Columns.Add("Fkunidades");
        settings.Columns.Add("Fkregimeniva");
        settings.Columns.Add(c =>
        {
            c.FieldName = "SMetros";
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            var p = c.PropertiesEdit as SpinEditProperties;
            p.ClientSideEvents.ValueChanged = "function (s,e){calculoImporte(GridViewLineas);}";
            p.SpinButtons.ShowIncrementButtons = false;
        });
        settings.Columns.Add("Precioanterior");
        settings.Columns.Add(c =>
        {
            c.FieldName = "SPrecio";
            c.Visible = false;
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            var p = c.PropertiesEdit as SpinEditProperties;
            p.SpinButtons.ShowIncrementButtons = false;
            p.ClientSideEvents.ValueChanged = "function (s,e){calculoImporte(GridViewLineas);}";
            p.Style.Paddings.PaddingRight = Unit.Pixel(10);
            p.EncodeHtml = false;
            p.ClientSideEvents.KeyDown = "OnKeyPressPrecios";
            p.ClientInstanceName = c.FieldName;
            p.ButtonStyle.CssClass = "btn btn-minier btn-purple";
            p.ClientSideEvents.ButtonClick = "function(e,o) { SearchPrecios(); } ";
            p.Buttons.Add(new EditButton("<i class=\"fa fa-search\"></i>"));
            p.SpinButtons.ShowIncrementButtons = false;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Porcentajedescuento";
            c.Visible = false;
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            var p = c.PropertiesEdit as SpinEditProperties;
            p.ClientSideEvents.ValueChanged = "function (s,e){calculoImporte(GridViewLineas);}";

            var editor = (TextEditProperties)c.PropertiesEdit;
            editor.DisplayFormatString = "N2";
            editor.DisplayFormatInEditMode = true;
            p.SpinButtons.ShowIncrementButtons = false;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Importedescuento";
            c.Visible = false;
            c.ReadOnly = true;
        });
        settings.Columns.Add("Fktiposiva");

        settings.Columns.Add("Porcentajerecargoequivalencia");
        settings.Columns.Add(c =>
        {
            c.FieldName = "Cuotarecargoequivalencia";
            c.Visible = false;
            c.ReadOnly = true;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "SImporte";
            c.Visible = false;
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            c.ReadOnly = true;
            var p = c.PropertiesEdit as SpinEditProperties;
            p.SpinButtons.ShowIncrementButtons = false;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Porcentajeiva";
            c.Visible = false;
            c.ReadOnly = true;
            c.ColumnType = MVCxGridViewColumnType.TextBox;
            var editor = (TextEditProperties)c.PropertiesEdit;
            editor.DisplayFormatString = "N2";
            editor.DisplayFormatInEditMode = true;

        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Cuotaiva";
            c.Visible = false;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Fkpedidosreferencia";
            c.Visible = false;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Fpedidos";
            c.Visible = false;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Fkpedidosid";
            c.Visible = false;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Lineaasociada";
            c.Visible = false;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Orden";
            c.Visible = true;
            c.ColumnType = MVCxGridViewColumnType.Default;
            c.SortOrder=ColumnSortOrder.Ascending;

        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "EnFactura";
            c.Visible = false;

        });

        settings.Columns.Add("Decimalesmonedas");
        settings.Columns.Add("Decimalesunidades");
        settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
        settings.Columns["Decimalesmonedas"].Visible = false;
        settings.Columns["Decimalesunidades"].Visible = false;
        settings.Columns["Id"].Visible = false;

        settings.Columns["Fkarticulos"].FixedStyle = GridViewColumnFixedStyle.Left;
        settings.Columns["Descripcion"].Width = Unit.Pixel(300);
        settings.Columns["Descripcion"].AllowTextTruncationInAdaptiveMode = true;
        settings.Columns["Descripcion"].CellStyle.Wrap = DefaultBoolean.False;

        settings.Columns["Revision"].Visible = false;

        settings.Columns["Fkunidades"].Visible = false;
        settings.Columns["Fkregimeniva"].Visible = false;

        settings.Columns["Precioanterior"].Visible = false;

        settings.Columns["Importedescuento"].Visible = false;
        settings.Columns["Fktiposiva"].Visible = false;
        settings.Columns["Porcentajeiva"].Visible = false;

        settings.Columns["Cuotaiva"].Visible = false;
        settings.Columns["Porcentajerecargoequivalencia"].Visible = false;
        settings.Columns["Cuotarecargoequivalencia"].Visible = false;

        settings.Settings.ShowFooter = true;
        settings.SetFooterCellTemplateContent(c =>
        {
            var col = c.Column as MVCxGridViewColumn;
            if (col == null) return;
            if (col.FieldName == "SImporte")
            {

                var model = c.Grid.DataSource as IEnumerable<Marfil.Dom.Persistencia.Model.Documentos.Traspasosalmacen.TraspasosalmacenLinModel>;
                var decimalesmonedas = model.FirstOrDefault()?.Decimalesmonedas ?? 2;
                var sum = model.Sum(f => f.Importe);
                ViewContext.Writer.Write((sum ?? 0).ToString("N" + decimalesmonedas));
            }
        });

        settings.CommandColumn.Visible = isreadonly;
        if (!isreadonly)
        {
            settings.CommandColumn.ButtonType = GridCommandButtonRenderMode.Button;

            settings.CommandColumn.ShowNewButton = false;
            settings.CommandColumn.ShowDeleteButton = true;
            settings.CommandColumn.ShowEditButton = false;

            
            settings.SettingsCommandButton.DeleteButton.Text = "<span tabindex=\"-1\" class=\"fa fa-trash\" title=\"" + General.LblBorrar + " - (Supr)\"></i>";
            settings.SettingsCommandButton.UpdateButton.Text = "<span tabindex=\"-1\" class=\"fa fa-save\" title=\"" + General.LblGuardar + " - (Enter)\"></i>";
            settings.SettingsCommandButton.CancelButton.Text = "<span tabindex=\"-1\" class=\"fa fa-close\" title=\"" + General.LblCancelar + " - (Ctlr + '+')\"></i>";

            settings.CommandColumn.Width = Unit.Pixel(150);
            settings.Styles.CommandColumnItem.CssClass = "btn btn-info";
            settings.Styles.CommandColumnItem.BorderStyle = BorderStyle.None;
            settings.CommandColumn.VisibleIndex = 0;
            settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
        }

        settings.SettingsEditing.ShowModelErrorsForEditors = true;
        settings.InitNewRow += (s, e) =>
        {
            e.NewValues["SImporte"] = 0;
            e.NewValues["Cantidad"] = 1;

            if (needCreatCopy)
            {
                object keyValue = ViewData["key"];
                object buttonid = ViewData["buttonid"];

                MVCxGridView gridView = (MVCxGridView)s;
                object[] rowValues = (object[])gridView.GetRowValuesByKeyValue(keyValue, new string[] { "Fkarticulos", "Descripcion", "Lote", "Revision", "Canal", "Cantidad", "Largo", "Ancho", "Grueso", "Metros", "Precio", "Porcentajedescuento", "Porcentajeiva", "Importe", "Caja", "Bundle", "Fkpedidos", "Fkpedidosid", "Id","Orden" });

                e.NewValues["Fkarticulos"] = rowValues[0];
                e.NewValues["Descripcion"] = rowValues[1];
                e.NewValues["Lote"] = rowValues[2];
                e.NewValues["Revision"] = rowValues[3];
                e.NewValues["Canal"] = rowValues[4];
                e.NewValues["Cantidad"] = rowValues[5];
                e.NewValues["SLargo"] = rowValues[6];
                e.NewValues["SAncho"] = rowValues[7];
                e.NewValues["SGrueso"] = rowValues[8];
                e.NewValues["SMetros"] = rowValues[9];
                e.NewValues["SPrecio"] = rowValues[10];
                e.NewValues["Largo"] = rowValues[6];
                e.NewValues["Ancho"] = rowValues[7];
                e.NewValues["Grueso"] = rowValues[8];
                e.NewValues["Metros"] = rowValues[9];
                e.NewValues["Precio"] = rowValues[10];

                e.NewValues["Porcentajedescuento"] = rowValues[11];
                e.NewValues["Porcentajeiva"] = rowValues[12];
                e.NewValues["SImporte"] = rowValues[13];
                e.NewValues["Importe"] = rowValues[13];
                e.NewValues["Caja"] = rowValues[14];
                e.NewValues["Bundle"] = rowValues[15];

               
                e.NewValues["Orden"] = rowValues[19];
            }
        };

        settings.BeforeGetCallbackResult = (sender, e) =>
        {
            if (needCreatCopy)
            {
                MVCxGridView gridView = (MVCxGridView)sender;
                gridView.AddNewRow();
            }
        };

        if (!isreadonly)
        {
            
            settings.ClientSideEvents.EndCallback = "function(s,e) { OnEndEditing(s,e);}";
            settings.ClientSideEvents.BeginCallback = "function(s,e) { OnStartEditing(s,e);}";
            settings.ClientSideEvents.RowDblClick = "function(s,e) {s.StartEditRow(e.visibleIndex)} ";
            settings.ClientSideEvents.FocusedRowChanged = "function(s,e) { FunOnFocusedRowLineasChanged(s, e);} ";
            settings.ClientSideEvents.Init = "function(s,e) { GridViewLineas.Focus();  }";
            settings.ClientSideEvents.RowDblClick = null;
        }

        //display
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;

        settings.ControlStyle.Border.BorderColor = ColorTranslator.FromHtml("#DDDDDD");
        settings.Styles.Footer.BackColor = ColorTranslator.FromHtml("#F2F2F2");


        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Left;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;




    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);

    }

}
@grid.Bind(Model).GetHtml()
@if (!isreadonly)
{
    <script type="text/javascript">



        //start search prices
       

        function OnKeyPressPrecios(s, e) {
            var keycode = (e.htmlEvent.keyCode ? e.htmlEvent.keyCode : e.htmlEvent.which);
            if (keycode == 66 && e.htmlEvent.ctrlKey) {
                SearchPrecios();
            }

        }

        function SearchPrecios() {
        
            cDescripcion = GridViewLineas.GetEditor("Descripcion");
            var obj = {
                campoIdentificador: "Precio",
                IdComponenteasociado: "Precio",
                IdFormulariomodal: "ultimoprecio",
                Url: '@Url.Action("UltimoprecioApi", "Api")',
                Titulo: "Últimos precios",
                Params: "{\"fkcuenta\":\"" + $("[name='Fkproveedores']").val() + "\",\"articulo\":\"" + Fkarticulos.GetValue() + "\",\"tipodocumento\":\"@Html.Raw((int)TipoDocumentos.Traspasosalmacen)\",\"cliente\":\"" + $("#cv-Fkproveedores-descripcion").html() + "\",\"descripcion\":\"" + cDescripcion.GetValue() + "\"}"
            };

            eventAggregator.Publish("_lanzarbusquedaultimoprecio", obj);
        }

        eventAggregator.RegisterEvent("Precio-Buscar", function (obj) {
            SPrecio.SetValue(obj);
            calculoImporte(GridViewLineas);
            SPrecio.Focus();
        });

        //end search prices

        //Start search articulos
        function OnKeyPressArticulos(s, e) {
            var keycode = (e.htmlEvent.keyCode ? e.htmlEvent.keyCode : e.htmlEvent.which);
            if (keycode == 66 && e.htmlEvent.ctrlKey) {
                SearchArticulo();
            }

        }

        function SearchArticulo() {

            var obj = {
                campoIdentificador: "Id",
                IdComponenteasociado: "Fkarticulos",
                IdFormulariomodal: "BusquedaGlobal",
                Url: '@Url.Action("ArticulosApi","Api")',
                Titulo: "Busqueda de articulos",
                Params: ""
            };

            eventAggregator.Publish("_lanzarbusqueda", obj);
        }

        eventAggregator.RegisterEvent("Fkarticulos-Buscarfocus", function (obj) {
            Fkarticulos.SetValue(obj);

            cDescripcion = GridViewLineas.GetEditor("Descripcion");
            GridViewLineas.SetEnabled(false);

            pedirArticulo(obj, '@Url.Action("ArticulosDocumentosApi","Api")', GridViewLineas, true);
        });


        function OnFkarticulosChanged(s, e) {

            cDescripcion = GridViewLineas.GetEditor("Descripcion");
            GridViewLineas.SetEnabled(false);

            pedirArticulo(s.GetValue(), '@Url.Action("ArticulosDocumentosApi", "Api")', GridViewLineas, true);

        }

        //end search articulos
        function FunOnFocusedRowLineasChanged(s, e) {


            $("#GridViewLineas").unbind("keydown");
            $('#GridViewLineas').keydown(function (event) {


                var keycode = (event.keyCode ? event.keyCode : event.which);
                var index = s.GetFocusedRowIndex();

                switch (keycode) {
                   
                    case 46: //Eliminar
                        if (!GridViewLineas.IsEditing()) {
                            GridViewLineas.DeleteRow(index);
                        }
                        break;
                    case 27: //escape
                        if (GridViewLineas.IsEditing()) {
                            GridViewLineas.CancelEdit();
                            GridViewLineas.Focus();
                        }
                        break;
                    case 13:

                        if (GridViewLineas.IsEditing() && !GridViewLineas.GetEditor("Descripcion").focused) {
                            event.preventDefault();
                            GridViewLineas.UpdateEdit();

                        }
                        break;
                    case 107: //mas
                        if (!GridViewLineas.IsEditing()) {
                            
                                CreateRow();
                            
                        }
                        break;
                   


                }

            });
        }


      

        var operation = "";
        function OnStartEditing(s, e) {

            operation = e.command;
            if (operation === "UPDATEEDIT" || operation === "DELETEROW" || operation === "ADDNEWROW") {

                if (articuloActual) {
                    e.customArgs['Fktiposiva'] = articuloActual.Fktiposiva;
                    e.customArgs['Decimalesmonedas'] = articuloActual.Decimalesmonedas;
                    e.customArgs['Decimalesunidades'] = articuloActual.Decimalestotales;


                }

                e.customArgs['descuentopp'] = Globalize.format($("[name='Porcentajedescuentoprontopago']").val());
                e.customArgs['descuentocomercial'] = Globalize.format($("[name='Porcentajedescuentocomercial']").val());
                e.customArgs['fkmonedas'] = $("[name='Fkmonedas']").val();
                e.customArgs['Fkregimeniva'] = $("[name='Fkregimeniva']").val();

               

              

            }

            

        }

        function OnEndEditing(s, e) {
            if (operation === 'STARTEDIT') {
                var cArticulos = Fkarticulos;
                GridViewLineas.SetEnabled(false);
                pedirArticulo(cArticulos.GetValue(), '@Url.Action("ArticulosDocumentosApi", "Api")', GridViewLineas, false);
                window.setTimeout(function () { GridViewLineas.SetHorizontalScrollPosition(0); GridViewTotales.SetHorizontalScrollPosition(0); }, 0);
            }
            else if (operation === "UPDATEEDIT" || operation === "DELETEROW") {
                GridViewTotales.Refresh();
                GridViewLineas.Focus();
                window.setTimeout(function () {
                    GridViewLineas.SetHorizontalScrollPosition(0); GridViewTotales.SetHorizontalScrollPosition(0);


                }, 0);
                if (GridViewLineas.GetVisibleRowsOnPage() > 0) {
                    GridViewLineas.SetFocusedRowIndex(GridViewLineas.GetVisibleRowsOnPage() - 1);
                }
            }
            else if (operation === "ADDNEWROW") {
                var cArticulos = Fkarticulos;
                if (cArticulos.GetValue() !== "")
                    pedirArticulo(cArticulos.GetValue(), '@Url.Action("ArticulosDocumentosApi", "Api")', GridViewLineas, false);
                window.setTimeout(function () { GridViewLineas.SetHorizontalScrollPosition(0); GridViewTotales.SetHorizontalScrollPosition(0); }, 0);
                Fkarticulos.SetValue("");
                Fkarticulos.Focus();

            }

            if (operation === "CUSTOMCALLBACK") {
                var cArticulos = Fkarticulos;
                if (cArticulos.GetValue() !== "")
                    pedirArticulo(cArticulos.GetValue(), '@Url.Action("ArticulosDocumentosApi", "Api")', GridViewLineas, false);
            }
        }



        function OnSuperficieChanged(s, e) {

            cCantidad = GridViewLineas.GetEditor("Cantidad");
            cLargo = GridViewLineas.GetEditor("SLargo");
            cAncho = GridViewLineas.GetEditor("SAncho");
            cGrueso = GridViewLineas.GetEditor("SGrueso");
            cMetros = GridViewLineas.GetEditor("SMetros");

            var num = FFormulasService.CreateFormula(articuloActual.Formulas).calculate(cCantidad.GetValue(), cLargo.GetValue(), cAncho.GetValue(), cGrueso.GetValue(), cMetros.GetValue(), articuloActual.Decimalestotales);
            cMetros.SetValue(Funciones.Redondear(num,articuloActual.Decimalestotales));
            calculoImporte(GridViewLineas);
        }

        function CreateRow() {
            eventAggregator.Publish("_nuevalinea", "");
        }
    </script>
}
