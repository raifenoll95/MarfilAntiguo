@using System.Drawing
@using System.Web.UI.WebControls
@using Marfil.Dom.Persistencia.Model.Contabilidad
@model IEnumerable<GuiasBalancesLineasModel>

@{
    bool needCreatCopy = ViewData["key"] != null;
    var isreadonly = Session["readonly"] != null ? (bool)Session["readonly"] : false;
}

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
//general
settings.Name = "GridViewGuiasBalancesLineas";
        settings.KeyFieldName = "Id";
        settings.CallbackRouteValues = new { Controller = "GuiasBalances", Action = "GuiasBalancesLineas" };
        settings.EnableRowsCache = true;
        settings.KeyboardSupport = true;
        settings.Width = Unit.Percentage(100);
        settings.SettingsPager.Visible = true;

//edition
settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "GuiasBalances", Action = "GuiasBalancesLineasAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "GuiasBalances", Action = "GuiasBalancesLineasUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "GuiasBalances", Action = "GuiasBalancesLineasDelete" };
        settings.CustomActionRouteValues = new { Controller = "GuiasBalances", Action = "CustomGridViewEditingPartial" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.Styles.Footer.HorizontalAlign = HorizontalAlign.Right;
        settings.SettingsEditing.NewItemRowPosition = GridViewNewItemRowPosition.Bottom;

        settings.Columns.Add(j =>
        {
            j.FieldName = "GuiasBalancesId";
            j.ColumnType = MVCxGridViewColumnType.ButtonEdit;
            j.Width = Unit.Pixel(150);
            var p = j.PropertiesEdit as ButtonEditProperties;

            p.Style.Paddings.PaddingRight = Unit.Pixel(20);
            p.EncodeHtml = false;
            p.ClientSideEvents.Init = "DescripcionDisabledComponentes";
            p.ClientSideEvents.ValueChanged = "OnIdComponenteChanged";
            p.ClientSideEvents.KeyDown = "OnKeyPressCuentas";
            p.ClientInstanceName = j.FieldName;
            p.ButtonStyle.CssClass = "btn btn-minier btn-purple";
            p.ClientSideEvents.ButtonClick = "function(e,o) { SearchComponente(); } ";
            p.Buttons.Add(new EditButton("<i class=\"fa fa-search\"></i>"));
        });

        settings.Columns.Add(j =>
        {
            j.FieldName = "informe";
            j.ColumnType = MVCxGridViewColumnType.ButtonEdit;
            j.Width = Unit.Pixel(360);
        });

        settings.Columns.Add("guia");
        settings.Columns.Add("orden");
        settings.Columns.Add("cuenta");
        settings.Columns.Add("signo");
        settings.Columns.Add("signoea");

        settings.Columns["GuiasBalancesId"].Visible = false;
        settings.Columns["informe"].Visible = true;
        settings.Columns["guia"].Visible = true;
        settings.Columns["orden"].Visible = true;
        settings.Columns["cuenta"].Visible = true;
        settings.Columns["signo"].Visible = true;
        settings.Columns["signoea"].Visible = true;

        settings.InitNewRow += (s, e) =>
        {
    ////Si es un registro nuevo
    e.NewValues["Id"] = "";
            e.NewValues["informe"] = "";
            e.NewValues["guia"] = 0;
            e.NewValues["GuiasBalancesId"] = 0;
            e.NewValues["orden"] = 0;
            e.NewValues["cuenta"] = 0;
            e.NewValues["signo"] = 0;
            e.NewValues["signoea"] = 0;
        };

        settings.CellEditorInitialize = (s, e) =>
        {
            var editor = e.Editor as ASPxEdit;
            if (editor == null) return;
            editor.ValidationSettings.Display = Display.Dynamic;
            if (e.Column.FieldName == settings.KeyFieldName)
            {
                editor.ValidationSettings.RegularExpression.ValidationExpression = "[0-9]{1,2}";
                editor.Focus();
            }
        };

        settings.CommandColumn.ButtonType = GridCommandButtonRenderMode.Button;
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.Width = Unit.Pixel(100);
        settings.Styles.CommandColumnItem.CssClass = "btn btn-info";
        settings.Styles.CommandColumnItem.BorderStyle = BorderStyle.None;
        settings.CommandColumn.VisibleIndex = 7;
        settings.SettingsEditing.ShowModelErrorsForEditors = true;

        settings.CellEditorInitialize += (sender, args) =>
        {
            if (args.Column.FieldName == settings.KeyFieldName)
            {
                ASPxTextBox tb = (ASPxTextBox)args.Editor;
        //tb.SetClientSideEventHandler("TextChanged", "function(s,e){ s.SetText(s.GetText().toUpperCase());}");
        tb.Focus();
            }
        };

        settings.ClientSideEvents.RowDblClick = "function(s,e) {s.StartEditRow(e.visibleIndex)} ";
        settings.ClientSideEvents.FocusedRowChanged = "function(s,e) { FunOnFocusedRowChanged(s, e);} ";
        settings.ClientSideEvents.Init = "function(s,e) { GridViewGuiasBalancesLineas.Focus();}";

        if (ViewBag.ReadOnly != null && ViewBag.ReadOnly)
        {
            settings.CommandColumn.Visible = false;
            settings.ClientSideEvents.RowDblClick = null;
        }

//display
settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;
        settings.ControlStyle.Border.BorderColor = ColorTranslator.FromHtml("#DDDDDD");
        settings.Styles.Footer.BackColor = ColorTranslator.FromHtml("#F2F2F2");
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Left;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);

    }
}

@grid.Bind(Model).GetHtml()

<script type="text/javascript">

        function FunOnFocusedRowChanged(s, e) {
            $("#GridViewGuiasBalancesLineas").unbind("keydown");
            $('#GridViewGuiasBalancesLineas').keydown(function (event) {


                var keycode = (event.keyCode ? event.keyCode : event.which);
                var index = s.GetFocusedRowIndex();

                switch (keycode) {
                    case 113://editar
                        if (!GridViewGuiasBalancesLineas.IsEditing()) {

                            GridViewGuiasBalancesLineas.StartEditRow(index);
                        }
                        break;
                    case 46://Eliminar
                        if (!GridViewGuiasBalancesLineas.IsEditing()) {
                            GridViewGuiasBalancesLineas.DeleteRow(index);
                        }
                        break;
                    case 27://escape
                        if (GridViewGuiasBalancesLineas.IsEditing()) {
                            GridViewGuiasBalancesLineas.CancelEdit();
                            GridViewGuiasBalancesLineas.Focus();
                        }
                        break;
                    case 13://enter
                        if (GridViewGuiasBalancesLineas.IsEditing()) {
                            GridViewGuiasBalancesLineas.Focus();
                            GridViewGuiasBalancesLineas.UpdateEdit();
                        }
                        break;
                    case 107://mas
                        CreateRow();
                        break;
                }

            });
        }

        //Se le llama cuando le das a nuevo registro
    function CreateLineasRowComponentes() {

        if (!GridViewGuiasBalancesLineas.IsEditing()) {
                GridViewGuiasBalancesLineas.Focus();
                var rowIndex = GridViewGuiasBalancesLineas.GetFocusedRowIndex();
                GridViewGuiasBalancesLineas.AddNewRow();
            }
        }

        //SE VIENE AQUI CUANDO CAMBIAS EL ID DEL COMPONENTE
        function OnIdComponenteChanged(s, e) {

            var componente = s.GetValue();
            s.SetValue(componente);
            GridViewGuiasBalancesLineas.GetEditor("GuiasBalancesId").SetEnabled(false);

            //Buscamos la descripcion del articulo
            SearchDescripcionAndPermitirMedidas(componente);
            s.Focus();
        }

        //Seteamos descripcion y medidas
        function SearchDescripcionAndPermitirMedidas(obj) {

            console.log("@Url.Action("ArticulosDocumentosApi","Api")" + "/" + obj);
            $.get("@Url.Action("ArticulosDocumentosApi","Api")" + "/" + obj).success(function (result) {

                //Descripcion
                GridViewGuiasBalancesLineas.GetEditor("DescripcionComponente").SetValue(result.Descripcion);

                GridViewGuiasBalancesLineas.GetEditor("Largo").SetValue(result.Largo);
                GridViewGuiasBalancesLineas.GetEditor("Ancho").SetValue(result.Ancho);
                GridViewGuiasBalancesLineas.GetEditor("Grueso").SetValue(result.Grueso);

                //Largo, Ancho, Grueso
                GridViewGuiasBalancesLineas.GetEditor("Piezas").SetEnabled(true);
                GridViewGuiasBalancesLineas.GetEditor("Merma").SetEnabled(true);
                GridViewGuiasBalancesLineas.GetEditor("Largo").SetEnabled(result.Permitemodificarlargo);
                GridViewGuiasBalancesLineas.GetEditor("Ancho").SetEnabled(result.Permitemodificarancho);
                GridViewGuiasBalancesLineas.GetEditor("Grueso").SetEnabled(result.Permitemodificargrueso);

            }).error(function (jqXHR, textStatus, errorThrown) {

                GridViewGuiasBalancesLineas.GetEditor("GuiasBalancesId").SetEnabled(true);
            });
        }

        //Se le llama cuando le das a la lupa para buscar el codigo del tercero
        function OnKeyPressCuentas(s, e) {
            console.log("keydown");
            var keycode = (e.htmlEvent.keyCode ? e.htmlEvent.keyCode : e.htmlEvent.which);
            if (keycode == 66 && e.htmlEvent.ctrlKey) {
                SearchTercero();
            }
        }

        //Se le llama cuando le das a la lupa de la columna
        function SearchComponente() {

            var obj = {
                campoIdentificador: "Id",
                IdComponenteasociado: "IdComponente",
                IdFormulariomodal: "BusquedaGlobal",
                Url: '@Url.Action("ArticulosApi","Api")',
                Titulo: "Busqueda de artículos",
                Params: "{\"nivel\":\"0\"}"
            };
            eventAggregator.Publish("_lanzarbusqueda", obj);
        }

        //Viene del BusquedasController.js que hace un publish con la cuenta y aqui te suscribes al evento
        eventAggregator.RegisterEvent("IdComponente-Buscarfocus", function (obj) {
            GridViewGuiasBalancesLineas.GetEditor("IdComponente").SetValue(obj);
            GridViewGuiasBalancesLineas.GetEditor("IdComponente").SetEnabled(false);
            SearchDescripcionAndPermitirMedidas(obj);
        });

        //Tenemos que tener a disabled la descripcion para que el usuario no la pueda modificar
        function DescripcionDisabledComponentes(s, e) {
            s.Focus();
            GridViewGuiasBalancesLineas.GetEditor("DescripcionComponente").SetEnabled(false);
        }

        //Creamos fila
        function CreateRow() {
            if (!GridViewGuiasBalancesLineas.IsEditing()) {
                GridViewGuiasBalancesLineas.Focus();
                GridViewGuiasBalancesLineas.AddNewRow();
            }
        }

        //Focus
        $(document).ready(function () {
            GridViewGuiasBalancesLineas.Focus();
        });

</script>